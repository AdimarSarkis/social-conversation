// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @unique

  groups Group[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  
}

model Group{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @db.Text

  profileId String
  profile Profile @relation(fields: [profileId],references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
}

// enum não está disponivel para SQL Server no prisma
// enum MemberRole {
 // ADMIN
 // MODERATOR
 // GUEST
//}

model MemberRole {
  id Int @id @default(autoincrement())
  name String

  members Member[]
}

model Member {
  id String @id @default(uuid())

  roleId Int // colocar no o id de acordo com o papel, ex: 1 ADMIN 2 MODERATOR 3 GUEST
  role MemberRole @relation(fields: [roleId], references: [id], onDelete: Cascade) 

  profileId String
  profile Profile @relation(fields: [profileId], references: [id],onDelete: Cascade)

  groupId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
  @@index([groupId])
  @@index([roleId])
}

//enum ChannelType1 {
  //TEXT
  //AUDIO
  //VIDEO
//}

model ChannelType{
  id Int @id @default(autoincrement())
  name String

  channels Channel[]
}
model Channel{
  id String @id @default(uuid())
  name String

  typeId Int
  type ChannelType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id],onDelete: Cascade)
  
  groupId String
  group Group @relation(fields: [groupId],references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([profileId])
  @@index([groupId])
  @@index([typeId])
}